generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  INIT
  INPROGRESS
  APPROVED
  REJECTED
  SHIPING
  DONE
}
model Book {
  id          String       @id @default(uuid())
  title       String
  description String?
  price       Float
  rate        Int
  quantity    Int
  imageUrl    String
  isActive    Boolean      @default(true)
  categoryId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  cartDetail  CartItem[]
  authors     BookAuthor[]
  orderDetail OrderItem[]
  bookPromotion BookPromotion[]
  review Review[]
  category    Category     @relation(fields: [categoryId], references: [id])
}

model BookAuthor {
  bookId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        String   @id @default(uuid())
  author    Author   @relation(fields: [authorId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@index([bookId, authorId])
}

model Author {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  books     BookAuthor[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  books       Book[]
}

model User {
  id          String   @id @default(uuid())
  email       String
  name        String
  password    String
  is_active   Boolean  @default(true)
  phoneNumber String?
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  cartId      String   @unique()
  userRoleId  Int
  order       Order[]
  review Review[]
  cart        Cart?    @relation(fields: [cartId], references: [id])
  role        Role     @relation(fields: [userRoleId], references: [id])
}

model Role {
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  user      User[]
}

model Order {
  id            String      @id @default(uuid())
  totalPrice    Float
  paymentMethod String
  isPaid        Boolean     @default(false)
  userId        String
  status        OrderStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  OrderDetail   OrderItem[]
  user          User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Cart {
  id         String     @id @default(uuid())
  cartDetail CartItem[]
  user       User?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
}

model CartItem {
  id        String   @id @default(uuid())
  bookId    String
  cartId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  book Book @relation(fields: [bookId], references: [id])
  cart Cart @relation(fields: [cartId], references: [id])
}

model Promotion {
  id String @id @default(uuid())
  description String
  startDate DateTime
  expriedDate DateTime
  discountPercents Int
  isActive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  bookPromotion BookPromotion[]
}

model BookPromotion {
  id String @id @default(uuid())
  bookId String
  promotionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  book Book @relation(fields: [bookId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])

}

model Review {
  id String @id @default(uuid())
  content String
  rate Int
  bookId String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
